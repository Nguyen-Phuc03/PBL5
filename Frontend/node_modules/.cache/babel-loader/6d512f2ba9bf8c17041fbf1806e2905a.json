{"ast":null,"code":"/////////////////////////////// FOR TEACHERS ////////////////////////////////////////\nexport const setStudent = student => ({\n  type: 'ADD_STUDENT',\n  student\n});\n\nconst clearStudents = () => ({\n  type: 'CLEAR_STUDENTS'\n});\n\nexport const getAndSetStudents = (filters = {}, projection = {}) => {\n  return dispatch => {\n    return new Promise((resolve, reject) => {\n      fetch(\"http://localhost:5000/get_all_students\", {\n        method: 'POST',\n        body: JSON.stringify({\n          filters,\n          projection\n        })\n      }).then(response => response.json()).then(response => {\n        dispatch(clearStudents());\n        response.allStudents.forEach(student => {\n          dispatch(setStudent(student));\n        });\n        resolve();\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  };\n};\nexport const updateStudent = (whomToUpdate, whatToUpdate) => ({\n  type: 'UPDATE_STUDENT',\n  whatToUpdate,\n  whomToUpdate\n});\nexport const startUpdateStudent = (whomToUpdate, whatToUpdate) => {\n  console.log(\"ToUPdata\", whatToUpdate);\n  return dispatch => {\n    fetch('http://localhost:5000/update_student', {\n      method: ['POST'],\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        whomToUpdate,\n        whatToUpdate\n      })\n    }).then(response => response.json()).then(response => {\n      const {\n        status\n      } = response;\n\n      if (status) {\n        dispatch(updateStudent(whomToUpdate, whatToUpdate));\n      }\n    });\n  };\n}; ////////////////////////////// FOR TEACHERS END /////////////////////////////////////","map":{"version":3,"sources":["E:/Documents/Reactjs/PBL5_Demo/Frontend/src/actions/students.js"],"names":["setStudent","student","type","clearStudents","getAndSetStudents","filters","projection","dispatch","Promise","resolve","reject","fetch","method","body","JSON","stringify","then","response","json","allStudents","forEach","catch","error","updateStudent","whomToUpdate","whatToUpdate","startUpdateStudent","console","log","headers","status"],"mappings":"AAAA;AACA,OAAO,MAAMA,UAAU,GAAIC,OAAD,KAAc;AACpCC,EAAAA,IAAI,EAAE,aAD8B;AAEpCD,EAAAA;AAFoC,CAAd,CAAnB;;AAMP,MAAME,aAAa,GAAG,OAAM;AACxBD,EAAAA,IAAI,EAAE;AADkB,CAAN,CAAtB;;AAIA,OAAO,MAAME,iBAAiB,GAAG,CAACC,OAAO,GAAC,EAAT,EAAYC,UAAU,GAAC,EAAvB,KAA8B;AAC3D,SAAQC,QAAD,IAAc;AACjB,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAASC,MAAT,KAAkB;AACjCC,MAAAA,KAAK,CAAC,wCAAD,EAA0C;AAC3CC,QAAAA,MAAM,EAAE,MADmC;AAE3CC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBV,UAAAA,OADiB;AAEjBC,UAAAA;AAFiB,SAAf;AAFqC,OAA1C,CAAL,CAOCU,IAPD,CAOMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAPlB,EAQCF,IARD,CAQMC,QAAQ,IAAI;AACdV,QAAAA,QAAQ,CAACJ,aAAa,EAAd,CAAR;AACAc,QAAAA,QAAQ,CAACE,WAAT,CAAqBC,OAArB,CAA6BnB,OAAO,IAAI;AACpCM,UAAAA,QAAQ,CAACP,UAAU,CAACC,OAAD,CAAX,CAAR;AACH,SAFD;AAIAQ,QAAAA,OAAO;AACV,OAfD,EAgBCY,KAhBD,CAgBQC,KAAD,IAAS;AACZZ,QAAAA,MAAM,CAACY,KAAD,CAAN;AACH,OAlBD;AAmBH,KApBM,CAAP;AAqBH,GAtBD;AAuBH,CAxBM;AA0BP,OAAO,MAAMC,aAAa,GAAG,CAACC,YAAD,EAAcC,YAAd,MAAgC;AACzDvB,EAAAA,IAAI,EAAE,gBADmD;AAEzDuB,EAAAA,YAFyD;AAGzDD,EAAAA;AAHyD,CAAhC,CAAtB;AAMP,OAAO,MAAME,kBAAkB,GAAG,CAACF,YAAD,EAAcC,YAAd,KAA+B;AAC7DE,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAuBH,YAAvB;AACA,SAAQlB,QAAD,IAAc;AACjBI,IAAAA,KAAK,CAAC,sCAAD,EAAwC;AACzCC,MAAAA,MAAM,EAAC,CAAC,MAAD,CADkC;AAEzCiB,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX,OAFgC;AAKzChB,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBS,QAAAA,YADiB;AAEjBC,QAAAA;AAFiB,OAAf;AALmC,KAAxC,CAAL,CAUCT,IAVD,CAUMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAVlB,EAWCF,IAXD,CAWMC,QAAQ,IAAI;AACd,YAAM;AAAEa,QAAAA;AAAF,UAAab,QAAnB;;AACA,UAAGa,MAAH,EAAU;AACNvB,QAAAA,QAAQ,CAACgB,aAAa,CAACC,YAAD,EAAcC,YAAd,CAAd,CAAR;AACH;AACJ,KAhBD;AAiBH,GAlBD;AAmBH,CArBM,C,CAyBP","sourcesContent":["/////////////////////////////// FOR TEACHERS ////////////////////////////////////////\nexport const setStudent = (student) => ({\n    type: 'ADD_STUDENT',\n    student\n})\n\n\nconst clearStudents = ()=> ({\n    type: 'CLEAR_STUDENTS'\n})\n\nexport const getAndSetStudents = (filters={},projection={}) => {\n    return (dispatch) => {\n        return new Promise((resolve,reject)=>{\n            fetch(\"http://localhost:5000/get_all_students\",{\n                method: 'POST',\n                body: JSON.stringify({\n                    filters,\n                    projection\n                })\n            })\n            .then(response => response.json())\n            .then(response => {\n                dispatch(clearStudents());\n                response.allStudents.forEach(student => {\n                    dispatch(setStudent(student))\n                });\n\n                resolve();\n            })\n            .catch((error)=>{\n                reject(error);\n            })\n        })\n    }\n}   \n\nexport const updateStudent = (whomToUpdate,whatToUpdate) => ({\n    type: 'UPDATE_STUDENT',\n    whatToUpdate,\n    whomToUpdate\n});\n\nexport const startUpdateStudent = (whomToUpdate,whatToUpdate) => {\n    console.log(\"ToUPdata\",whatToUpdate)\n    return (dispatch) => {\n        fetch('http://localhost:5000/update_student',{\n            method:['POST'],\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                whomToUpdate,\n                whatToUpdate\n            })\n        })\n        .then(response => response.json())\n        .then(response => {\n            const { status } = response;\n            if(status){\n                dispatch(updateStudent(whomToUpdate,whatToUpdate))\n            } \n        })\n    }\n}\n\n\n\n////////////////////////////// FOR TEACHERS END /////////////////////////////////////"]},"metadata":{},"sourceType":"module"}