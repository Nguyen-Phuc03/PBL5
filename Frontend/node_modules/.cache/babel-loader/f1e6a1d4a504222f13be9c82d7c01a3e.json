{"ast":null,"code":"/////////////////////////////// FOR TEACHERS ////////////////////////////////////////\nexport const setTeacher = teacher => ({\n  type: 'ADD_TEACHER',\n  teacher\n});\n\nconst clearTeachers = () => ({\n  type: 'CLEAR_TEACHERS'\n});\n\nexport const getAndSetTeachers = (filters = {}, projection = {}) => {\n  console.log(\"Filters : \", filters, \"Projection : \", projection);\n  return dispatch => {\n    return new Promise((resolve, reject) => {\n      fetch(\"http://localhost:5000/get_all_teachers\", {\n        method: 'POST',\n        body: JSON.stringify({\n          filters,\n          projection\n        })\n      }).then(response => response.json()).then(response => {\n        dispatch(clearTeachers());\n        response.allTeachers.forEach(teacher => {\n          dispatch(setTeacher(teacher));\n        });\n        resolve();\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  };\n};\nexport const updateTeacher = (whomToUpdate, whatToUpdate) => ({\n  type: 'UPDATE_TEACHER',\n  whatToUpdate,\n  whomToUpdate\n});\nexport const startUpdateTeacher = (whomToUpdate, whatToUpdate) => {\n  return dispatch => {\n    fetch('http://localhost:5000/update_teacher', {\n      method: ['POST'],\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        whomToUpdate,\n        whatToUpdate\n      })\n    }).then(response => response.json()).then(response => {\n      const {\n        status\n      } = response;\n\n      if (status) {\n        dispatch(updateTeacher(whomToUpdate, whatToUpdate));\n      }\n    });\n  };\n}; ////////////////////////////// FOR TEACHERS END /////////////////////////////////////","map":{"version":3,"sources":["C:/Users/USER/Downloads/PBL5_Demo/PBL5_Demo/Frontend/src/actions/teachers.js"],"names":["setTeacher","teacher","type","clearTeachers","getAndSetTeachers","filters","projection","console","log","dispatch","Promise","resolve","reject","fetch","method","body","JSON","stringify","then","response","json","allTeachers","forEach","catch","error","updateTeacher","whomToUpdate","whatToUpdate","startUpdateTeacher","headers","status"],"mappings":"AAAA;AACA,OAAO,MAAMA,UAAU,GAAIC,OAAD,KAAc;AACpCC,EAAAA,IAAI,EAAE,aAD8B;AAEpCD,EAAAA;AAFoC,CAAd,CAAnB;;AAKP,MAAME,aAAa,GAAG,OAAO;AACzBD,EAAAA,IAAI,EAAE;AADmB,CAAP,CAAtB;;AAKA,OAAO,MAAME,iBAAiB,GAAG,CAACC,OAAO,GAAC,EAAT,EAAaC,UAAU,GAAC,EAAxB,KAA+B;AAC5DC,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAAyBH,OAAzB,EAAkC,eAAlC,EAAmDC,UAAnD;AACA,SAAQG,QAAD,IAAc;AACjB,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAmB;AAClCC,MAAAA,KAAK,CAAC,wCAAD,EAA0C;AAC3CC,QAAAA,MAAM,EAAE,MADmC;AAE3CC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBZ,UAAAA,OADiB;AAEjBC,UAAAA;AAFiB,SAAf;AAFqC,OAA1C,CAAL,CAOCY,IAPD,CAOMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAPlB,EAQCF,IARD,CAQMC,QAAQ,IAAI;AACdV,QAAAA,QAAQ,CAACN,aAAa,EAAd,CAAR;AACAgB,QAAAA,QAAQ,CAACE,WAAT,CAAqBC,OAArB,CAA6BrB,OAAO,IAAI;AACpCQ,UAAAA,QAAQ,CAACT,UAAU,CAACC,OAAD,CAAX,CAAR;AACH,SAFD;AAGAU,QAAAA,OAAO;AACV,OAdD,EAeCY,KAfD,CAeOC,KAAK,IAAG;AACXZ,QAAAA,MAAM,CAACY,KAAD,CAAN;AACH,OAjBD;AAkBH,KAnBM,CAAP;AAoBH,GArBD;AAsBH,CAxBM;AA0BP,OAAO,MAAMC,aAAa,GAAG,CAACC,YAAD,EAAcC,YAAd,MAAgC;AACzDzB,EAAAA,IAAI,EAAE,gBADmD;AAEzDyB,EAAAA,YAFyD;AAGzDD,EAAAA;AAHyD,CAAhC,CAAtB;AAMP,OAAO,MAAME,kBAAkB,GAAG,CAACF,YAAD,EAAcC,YAAd,KAA+B;AAC7D,SAAQlB,QAAD,IAAc;AACjBI,IAAAA,KAAK,CAAC,sCAAD,EAAwC;AACzCC,MAAAA,MAAM,EAAC,CAAC,MAAD,CADkC;AAEzCe,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX,OAFgC;AAKzCd,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBS,QAAAA,YADiB;AAEjBC,QAAAA;AAFiB,OAAf;AALmC,KAAxC,CAAL,CAUCT,IAVD,CAUMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAVlB,EAWCF,IAXD,CAWMC,QAAQ,IAAI;AACd,YAAM;AAAEW,QAAAA;AAAF,UAAaX,QAAnB;;AACA,UAAGW,MAAH,EAAU;AACNrB,QAAAA,QAAQ,CAACgB,aAAa,CAACC,YAAD,EAAcC,YAAd,CAAd,CAAR;AACH;AACJ,KAhBD;AAiBH,GAlBD;AAmBH,CApBM,C,CAwBP","sourcesContent":["/////////////////////////////// FOR TEACHERS ////////////////////////////////////////\nexport const setTeacher = (teacher) => ({\n    type: 'ADD_TEACHER',\n    teacher\n})\n\nconst clearTeachers = () => ({\n    type: 'CLEAR_TEACHERS'\n})\n\n\nexport const getAndSetTeachers = (filters={}, projection={}) => {\n    console.log(\"Filters : \",filters, \"Projection : \", projection);\n    return (dispatch) => {\n        return new Promise((resolve, reject)=>{\n            fetch(\"http://localhost:5000/get_all_teachers\",{\n                method: 'POST',\n                body: JSON.stringify({\n                    filters,\n                    projection\n                })\n            })\n            .then(response => response.json())\n            .then(response => {\n                dispatch(clearTeachers());\n                response.allTeachers.forEach(teacher => {\n                    dispatch(setTeacher(teacher));\n                });\n                resolve();\n            })\n            .catch(error =>{\n                reject(error);\n            })\n        })\n    }\n}   \n\nexport const updateTeacher = (whomToUpdate,whatToUpdate) => ({\n    type: 'UPDATE_TEACHER',\n    whatToUpdate,\n    whomToUpdate\n});\n\nexport const startUpdateTeacher = (whomToUpdate,whatToUpdate) => {\n    return (dispatch) => {\n        fetch('http://localhost:5000/update_teacher',{\n            method:['POST'],\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                whomToUpdate,\n                whatToUpdate\n            })\n        })\n        .then(response => response.json())\n        .then(response => {\n            const { status } = response;\n            if(status){\n                dispatch(updateTeacher(whomToUpdate,whatToUpdate))\n            } \n        })\n    }\n}\n\n\n\n////////////////////////////// FOR TEACHERS END /////////////////////////////////////"]},"metadata":{},"sourceType":"module"}