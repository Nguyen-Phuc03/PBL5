{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Downloads\\\\PBL5_Demo\\\\PBL5_Demo\\\\Frontend\\\\src\\\\routers\\\\Authenticate.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getRoleFromCookie } from '../helperFunction/getCookie';\nexport default (WrappedComponent => {\n  class Authenticate extends Component {\n    constructor(...args) {\n      super(...args);\n      this.state = {\n        isAuthenticated: false\n      };\n    }\n\n    componentDidMount() {\n      this.checkAndRedirect();\n    }\n\n    checkAndRedirect() {\n      if (this.isAuthenticated()) {\n        this.setState({\n          isAuthenticated: true\n        });\n      } else {\n        this.setState({\n          isAuthenticated: false\n        });\n        this.props.history.push('/');\n      }\n    }\n\n    isAuthenticated() {\n      const role = getRoleFromCookie();\n      /**\n       * Page will be only rendered if role === requiredRole\n       * \n       * That will make sure Page will not be acessed if the user is not \n       *the required user\n       */\n\n      if (role === this.props.requiredRole) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    render() {\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 17\n        }\n      }, this.state.isAuthenticated && /*#__PURE__*/React.createElement(WrappedComponent, Object.assign({}, this.props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 52\n        }\n      })));\n    }\n\n  }\n\n  return connect()(Authenticate);\n});","map":{"version":3,"sources":["C:/Users/USER/Downloads/PBL5_Demo/PBL5_Demo/Frontend/src/routers/Authenticate.js"],"names":["React","Component","connect","getRoleFromCookie","WrappedComponent","Authenticate","state","isAuthenticated","componentDidMount","checkAndRedirect","setState","props","history","push","role","requiredRole","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,iBAAT,QAAkC,6BAAlC;AAEA,gBAAgBC,gBAAD,IAAsB;AACjC,QAAMC,YAAN,SAA2BJ,SAA3B,CAAqC;AAAA;AAAA;AAAA,WACjCK,KADiC,GACzB;AACJC,QAAAA,eAAe,EAAE;AADb,OADyB;AAAA;;AAKjCC,IAAAA,iBAAiB,GAAG;AAChB,WAAKC,gBAAL;AACH;;AAGDA,IAAAA,gBAAgB,GAAG;AACf,UAAG,KAAKF,eAAL,EAAH,EAA0B;AACtB,aAAKG,QAAL,CAAe;AAACH,UAAAA,eAAe,EAAG;AAAnB,SAAf;AACH,OAFD,MAEK;AACD,aAAKG,QAAL,CAAe;AAACH,UAAAA,eAAe,EAAG;AAAnB,SAAf;AACA,aAAKI,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwB,GAAxB;AACH;AACJ;;AAEDN,IAAAA,eAAe,GAAE;AACb,YAAMO,IAAI,GAAGX,iBAAiB,EAA9B;AAEA;AACZ;AACA;AACA;AACA;AACA;;AACY,UAAGW,IAAI,KAAK,KAAKH,KAAL,CAAWI,YAAvB,EAAoC;AAChC,eAAO,IAAP;AACH,OAFD,MAEK;AACD,eAAO,KAAP;AACH;AACJ;;AAEDC,IAAAA,MAAM,GAAE;AACJ,0BACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKV,KAAL,CAAWC,eAAX,iBAA8B,oBAAC,gBAAD,oBAAsB,KAAKI,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADnC,CADJ;AAKH;;AAzCgC;;AA4CrC,SAAOT,OAAO,GAAGG,YAAH,CAAd;AACH,CA9CD","sourcesContent":["import React,{ Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getRoleFromCookie } from '../helperFunction/getCookie'\n\nexport default (WrappedComponent) => {\n    class Authenticate extends Component {\n        state = {\n            isAuthenticated: false\n        }\n        \n        componentDidMount() {\n            this.checkAndRedirect()\n        }\n\n\n        checkAndRedirect() {\n            if(this.isAuthenticated()){\n                this.setState( {isAuthenticated : true} )\n            }else{\n                this.setState( {isAuthenticated : false} )\n                this.props.history.push('/')\n            }\n        }\n\n        isAuthenticated(){\n            const role = getRoleFromCookie();\n\n            /**\n             * Page will be only rendered if role === requiredRole\n             * \n             * That will make sure Page will not be acessed if the user is not \n             *the required user\n             */\n            if(role === this.props.requiredRole){\n                return true\n            }else{\n                return false\n            }\n        }\n\n        render(){\n            return(\n                <React.Fragment>\n                    {this.state.isAuthenticated && <WrappedComponent {...this.props} />}\n                </React.Fragment>\n            )\n        }\n    }\n\n    return connect()(Authenticate);\n}\n\n"]},"metadata":{},"sourceType":"module"}