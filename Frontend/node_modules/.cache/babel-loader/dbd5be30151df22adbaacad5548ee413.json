{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Downloads\\\\PBL5_Demo\\\\PBL5_Demo\\\\Frontend\\\\src\\\\components\\\\LoginPage\\\\LoginPage.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { getUsernameFromCookie } from '../../helperFunction/getCookie';\nimport { setUser } from '../../actions/user';\nimport Cookies from 'universal-cookie';\nimport setInputState from '../../genericFunctions/setInputState';\nimport handleSubmit from '../../genericFunctions/handleSubmit';\nimport \"./LoginPage.scss\";\n\nclass LoginPage extends Component {\n  constructor(props) {\n    super(props); //////////////////////STATE /////////////////////////////////////\n\n    this.onInputChange = e => {\n      const value = e.target.value;\n      const name = e.target.id;\n      setInputState.call(this, \"data\", name, value);\n    };\n\n    this.setErrors = toUpdate => {\n      this.setState(prevState => {\n        return {\n          errors: { ...prevState.errors,\n            ...toUpdate\n          }\n        };\n      });\n      this.setState({\n        errorsExists: true\n      });\n    };\n\n    this.clearAllErrors = () => {\n      this.setErrors({\n        username: \"\",\n        password: \"\",\n        usernameOrPassword: \"\",\n        unAuthorized: \"\",\n        otherError: \"\"\n      });\n      this.setState({\n        errorsExists: false\n      });\n    };\n\n    this.setCookies = (username, role) => {\n      const cookies = new Cookies();\n      cookies.set(\"username\", username);\n      cookies.set(\"role\", role);\n    };\n\n    this.handleResponse = response => {\n      const {\n        message,\n        status\n      } = response.result;\n\n      if (response['status'] === 200) {\n        switch (status) {\n          case 200:\n            const {\n              username,\n              role\n            } = response.result.data; // SET THE COOKIES TO BE USED TO CHECK \n            //IF & WHICH USER IF LOGGEDIN \n\n            this.setCookies(username, role); // USED TO RE-RENDER SIDEBAR WHILE LOGIN  \n\n            this.props.setUser(response.result.data);\n            this.props.history.push('/');\n            break;\n\n          case 401:\n            this.setErrors({\n              usernameOrPassword: message\n            });\n            break;\n\n          case 403:\n            this.setErrors({\n              usernameOrPassword: message\n            });\n            break;\n\n          default:\n            console.log(\"Unknown response\");\n            break;\n        }\n      } else if (response.status === 400) {\n        const result = response.result;\n        console.log(result.message);\n      }\n    };\n\n    this.onSubmit = e => {\n      e.preventDefault();\n      const url = \"http://localhost:5000/login\";\n      handleSubmit.call(this, url);\n    };\n\n    this.state = {\n      data: {\n        username: \"\",\n        password: \"\",\n        remember_me: true\n      },\n      errorsExists: false,\n      errors: {\n        username: \"\",\n        password: \"\",\n        usernameOrPassword: \"\",\n        unAuthorized: \"\",\n        otherError: \"\"\n      }\n    }; ///////////////////////////STATE ENDS //////////////////////////////////\n  } ////////////////////////////////// INPUT HANDLERS ///////////////////////////\n\n\n  applyAuthentication() {\n    const data = this.state.data;\n    return new Promise((resolve, reject) => {\n      if (data.username === '') {\n        this.setErrors({\n          username: \"Fill the box\"\n        });\n      }\n\n      if (data.password === '') {\n        this.setErrors({\n          password: \"Fill the box\"\n        });\n      }\n\n      resolve();\n    });\n  } ///////////////////////ERROR HANDLERS END/////////////////////////////////////\n\n\n  //////////////////////////LOGIN HANDLER ENDS //////////////////////////////\n  render() {\n    const loggedIn = !!getUsernameFromCookie();\n\n    if (!loggedIn) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"MainBody LoginMainBody\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Container LoginContainer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"FormContainer LoginFormContainer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"header\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 33\n        }\n      }, \"Account Login\")), this.state.errors.usernameOrPassword && /*#__PURE__*/React.createElement(\"p\", {\n        className: \"errorMessage\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 70\n        }\n      }, this.state.errors.usernameOrPassword), /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: this.onSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        className: \"Label\",\n        htmlFor: \"username\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 37\n        }\n      }, \"USERNAME\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"inputErrorDiv\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"inputDiv\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        id: \"username\",\n        placeholder: \"\",\n        value: this.state.username,\n        onChange: this.onInputChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 45\n        }\n      })), this.state.errors.username && /*#__PURE__*/React.createElement(\"span\", {\n        className: \"errorMessage\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 72\n        }\n      }, this.state.errors.username))), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        className: \"Label\",\n        htmlFor: \"password\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 37\n        }\n      }, \"PASSWORD\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"inputErrorDiv\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"inputDiv\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"password\",\n        id: \"password\",\n        placeholder: \"\",\n        value: this.state.password,\n        onChange: this.onInputChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 45\n        }\n      })), this.state.errors.password && /*#__PURE__*/React.createElement(\"span\", {\n        className: \"errorMessage\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 72\n        }\n      }, this.state.errors.password))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"LoginFooter\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"remember-me\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"checkbox\",\n        id: \"remember_me\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 41\n        }\n      }), /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"remember_me\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 41\n        }\n      }, \"Remember Me\")), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 37\n        }\n      }, \"Forgot Password?\")), /*#__PURE__*/React.createElement(\"button\", {\n        className: \"Button LoginButton\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 33\n        }\n      }, \"Login\")))));\n    } else {\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: \"/\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 20\n        }\n      });\n    }\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setUser: user => dispatch(setUser(user))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginPage);","map":{"version":3,"sources":["C:/Users/USER/Downloads/PBL5_Demo/PBL5_Demo/Frontend/src/components/LoginPage/LoginPage.js"],"names":["React","Component","connect","Redirect","getUsernameFromCookie","setUser","Cookies","setInputState","handleSubmit","LoginPage","constructor","props","onInputChange","e","value","target","name","id","call","setErrors","toUpdate","setState","prevState","errors","errorsExists","clearAllErrors","username","password","usernameOrPassword","unAuthorized","otherError","setCookies","role","cookies","set","handleResponse","response","message","status","result","data","history","push","console","log","onSubmit","preventDefault","url","state","remember_me","applyAuthentication","Promise","resolve","reject","render","loggedIn","mapStateToProps","user","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React , { Component } from 'react'\nimport {connect} from 'react-redux'\nimport { Redirect } from 'react-router-dom';\nimport { getUsernameFromCookie } from '../../helperFunction/getCookie';\nimport { setUser } from '../../actions/user'\nimport Cookies from 'universal-cookie';\n\nimport setInputState from '../../genericFunctions/setInputState';\nimport handleSubmit from '../../genericFunctions/handleSubmit';\n\nimport \"./LoginPage.scss\";\nclass LoginPage extends Component{\n    constructor(props){\n        super(props);\n\n        //////////////////////STATE /////////////////////////////////////\n\n        this.state={\n            data: {\n                username: \"\",\n                password: \"\",\n                remember_me: true\n            },\n            errorsExists: false,\n            errors:{\n                username: \"\",\n                password: \"\",\n                usernameOrPassword: \"\",\n                unAuthorized: \"\",\n                otherError: \"\"\n            }\n        }\n\n        ///////////////////////////STATE ENDS //////////////////////////////////\n    }\n\n\n    ////////////////////////////////// INPUT HANDLERS ///////////////////////////\n\n    onInputChange = (e)=>{\n        const value = e.target.value;\n        const name = e.target.id;\n\n        setInputState.call(this,\"data\",name,value);\n    }\n\n    ////////////////////////////////// INPUT HANDLERS ENDS ///////////////////////////////\n\n\n\n    ///////////////////////ERRORS HANDLERS//////////////////////////////////\n\n    setErrors = (toUpdate)=>{\n        this.setState((prevState) =>{\n            return {\n                errors:{\n                    ...prevState.errors,\n                    ...toUpdate\n                }\n            }\n        })\n        this.setState({errorsExists: true});\n    }\n\n    clearAllErrors = ()=>{\n        this.setErrors({\n            username: \"\",\n            password: \"\",\n            usernameOrPassword: \"\",\n            unAuthorized: \"\",\n            otherError: \"\"\n        })\n        this.setState({errorsExists: false});\n    }\n\n\n    applyAuthentication(){\n        const data = this.state.data;\n        return new Promise((resolve,reject)=>{\n            if(data.username === ''){\n                this.setErrors({username: \"Fill the box\"})\n            }\n            if(data.password === ''){\n                this.setErrors({password: \"Fill the box\"})\n            }\n            resolve();\n        })\n    }\n\n    ///////////////////////ERROR HANDLERS END/////////////////////////////////////\n\n\n    setCookies = (username,role) =>{\n        const cookies = new Cookies();\n        cookies.set(\"username\",username);\n        cookies.set(\"role\",role);\n    }\n\n\n    ////////////////////LOGIN HANDLER /////////////////////////////////////\n\n    handleResponse = (response)=>{\n        const { message, status } = response.result;\n\n        if(response['status'] === 200){\n            switch(status){\n                case 200:\n                    const { username,role } = response.result.data;\n                    // SET THE COOKIES TO BE USED TO CHECK \n                    //IF & WHICH USER IF LOGGEDIN \n                    this.setCookies(username,role);\n                    // USED TO RE-RENDER SIDEBAR WHILE LOGIN  \n                    this.props.setUser(response.result.data);\n                    this.props.history.push('/');\n                    break;\n                case 401:\n                    this.setErrors({usernameOrPassword: message})\n                    break;\n                case 403:\n                    this.setErrors({usernameOrPassword: message})\n                    break;\n                default:\n                    console.log(\"Unknown response\")\n                    break;\n            }\n        }else if(response.status === 400){\n            const result = response.result;\n            console.log(result.message);\n        }\n    }\n\n\n    onSubmit = (e)=>{\n        e.preventDefault();\n\n        const url = \"http://localhost:5000/login\";\n        handleSubmit.call(this,url);\n    }\n\n\n    //////////////////////////LOGIN HANDLER ENDS //////////////////////////////\n    render(){\n        const loggedIn = !!getUsernameFromCookie();\n        if(!loggedIn){\n            return (\n                <div className=\"MainBody LoginMainBody\">\n                    <div className=\"Container LoginContainer\">\n                        <div className=\"FormContainer LoginFormContainer\">\n                            <header>\n                                <h1>Account Login</h1>\n                            </header>\n                            {this.state.errors.usernameOrPassword && <p className=\"errorMessage\">{this.state.errors.usernameOrPassword}</p>}\n                            <form onSubmit={this.onSubmit}>\n                                <div>\n                                    <label      \n                                        className=\"Label\"\n                                        htmlFor=\"username\"\n                                    >\n                                        USERNAME\n                                    </label>\n                                    <div className=\"inputErrorDiv\">\n                                        <div className=\"inputDiv\">\n                                            <input \n                                                type=\"text\"\n                                                id=\"username\"\n                                                placeholder=\"\"\n                                                value={this.state.username}\n                                                onChange={this.onInputChange}\n                                            />\n                                        </div>\n                                        {this.state.errors.username && <span className=\"errorMessage\">{this.state.errors.username}</span>}\n                                    </div>\n                                </div>\n                                <div>\n                                    <label \n                                        className=\"Label\"\n                                        htmlFor=\"password\"\n                                    >\n                                        PASSWORD\n                                    </label>\n                                    <div className=\"inputErrorDiv\">\n                                        <div className=\"inputDiv\">\n                                            <input \n                                                type=\"password\"\n                                                id=\"password\"\n                                                placeholder=\"\"\n                                                value={this.state.password}\n                                                onChange={this.onInputChange}\n                                            />\n                                        </div>\n                                        {this.state.errors.password && <span className=\"errorMessage\">{this.state.errors.password}</span>}\n                                    </div>\n                                </div>\n                                <div className=\"LoginFooter\">\n                                    <div className=\"remember-me\">\n                                        <input \n                                            type=\"checkbox\"\n                                            id=\"remember_me\"\n                                        />\n                                        <label \n                                            htmlFor=\"remember_me\"\n                                        >\n                                            Remember Me\n                                        </label>\n                                    </div>\n    \n                                    <div>Forgot Password?</div>   \n                                </div>\n    \n                                <button className=\"Button LoginButton\">\n                                    Login\n                                </button>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            )\n\n        }else{\n            return <Redirect to=\"/\" />\n        }\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n      user: state.user\n    };\n  };\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        setUser : (user)=> dispatch(setUser(user))\n    }\n}\n  \nexport default connect(mapStateToProps,mapDispatchToProps)(LoginPage);\n  "]},"metadata":{},"sourceType":"module"}