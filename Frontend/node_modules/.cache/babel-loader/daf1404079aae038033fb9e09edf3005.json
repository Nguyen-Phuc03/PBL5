{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Downloads\\\\PBL5_Demo\\\\PBL5_Demo\\\\Frontend\\\\src\\\\components\\\\EnrollToCoursePage\\\\EnrollToCoursePage.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getAndSetStudents } from '../../actions/students';\nimport getAndSetCourses from '../../actions/courses';\nimport { getUsernameFromCookie } from '../../helperFunction/getCookie';\nimport setInputState from '../../genericFunctions/setInputState';\nimport './_enrollToCoursePage.scss';\n\nclass EnrollToCoursePage extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onFileInputChange = e => {\n      const value = e.target.files[0]; //setInputState.call(this,\"\")\n\n      this.setState(prevState => {\n        return {\n          data: { ...prevState.data,\n            studentImage: value\n          }\n        };\n      });\n    };\n\n    this.onInputChange = e => {\n      const name = e.target.id;\n      const value = !this.state.data.courseData[name];\n      this.setState(prevState => {\n        return {\n          data: { ...prevState.data,\n            courseData: { ...prevState.data.courseData,\n              [name]: value\n            }\n          }\n        };\n      });\n    };\n\n    this.setErrors = toUpdate => {\n      this.setState(prevState => {\n        return {\n          errors: { ...prevState.errors,\n            ...toUpdate\n          }\n        };\n      }, () => console.log(this.state.errors));\n      this.setState({\n        errorsExists: true\n      });\n    };\n\n    this.clearAllErrors = () => {\n      this.setErrors({\n        roll_no: \"\",\n        otherError: \"\"\n      });\n      this.setState({\n        errorsExists: false\n      });\n    };\n\n    this.handleResponse = responseArray => {\n      /**\n       * Array of response if send each for each course\n       * which student option to select \n       */\n      responseArray.forEach(response => {\n        const {\n          name\n        } = response;\n        const {\n          message,\n          status\n        } = response.result;\n\n        if (response.status === 200) {\n          switch (status) {\n            case 201:\n              console.log(message);\n              setInputState.call(this, \"messages\", name, message);\n              break;\n\n            case 409:\n              console.log(message);\n              setInputState.call(this, \"messages\", name, message);\n              break;\n\n            case 400:\n              this.setErrors({\n                otherError: message\n              });\n              console.log(message);\n              break;\n\n            default:\n              break;\n          }\n        }\n      });\n    };\n\n    this.makeRequest = requestUrl => {\n      let formData = new FormData();\n      const {\n        studentImage,\n        courseData\n      } = this.state.data; // Thêm dữ liệu file và thông tin khác vào formData\n\n      formData.append('file', studentImage);\n      formData.append(\"courseData\", JSON.stringify(courseData));\n      formData.append(\"roll_no\", this.props.stdents[0].roll_no);\n      u;\n      const options = {\n        method: 'POST',\n        body: formData\n      };\n\n      if (!this.state.errorsExists) {\n        fetch(requestUrl, options).then(response => {\n          if (!response.ok) {\n            throw new Error('Network response was not ok');\n          }\n\n          return response.json();\n        }).then(responseArray => this.handleResponse(responseArray)).catch(error => {\n          console.error('Error:', error);\n        });\n      }\n    };\n\n    this.onSubmit = e => {\n      e.preventDefault();\n      this.clearAllErrors();\n      this.applyAuthentication()\n      /**\n       * IF THERE IS NO ERRORS ONLY THEN \n       * MAKE THE REQUEST OTHERWISE DO NOTHING\n       * \n       * AND \n       * \n       * THERE WILL BE SHOWING ERROR ON THE FORM IF ANY EXIST\n      */\n      .then(() => {\n        console.log(\"IN\");\n        const url = \"http://localhost:5000/enroll_student\";\n        this.makeRequest(url);\n      });\n    };\n\n    this.componentDidMount = () => {\n      /* \n          Set Student Filters and Projection \n          to get only Specified part of current Student\n      */\n      const studentFilters = {\n        username: getUsernameFromCookie()\n      };\n      const studentProjection = {\n        \"department\": true,\n        \"semester\": true,\n        \"roll_no\": true\n      };\n      /* \n          Make a Asnc Request to get the student details\n          Note :- It will return a Promise\n      */\n\n      this.props.setStudents(studentFilters, studentProjection).then(() => {\n        /* \n            Now Set Filter and Projection to Get \n            Only Coures Related to the loogedIn Student\n        */\n        const loggedStudent = this.props.students[0];\n        const {\n          department,\n          semester\n        } = loggedStudent;\n        const courseFilters = {\n          department,\n          semester\n        };\n        const courseProjection = {\n          \"name\": true\n        };\n        /* \n            Make the Asnc Request to get the Courses \n        */\n\n        this.props.setCourses(courseFilters, courseProjection).then(() => {\n          /*\n              Set False For all Course in The State\n              \"FALSE\" represents that CheckBox is unchecked\n              and will be change to True when CheckBox is Checked\n          */\n          this.props.courses.forEach(course => {\n            this.setState(prevState => {\n              return {\n                data: { ...prevState.data,\n                  courseData: { ...prevState.data.courseData,\n                    [course.name]: false\n                  }\n                }\n              };\n            });\n          });\n          this.setState({\n            isFetching: true\n          });\n        });\n      });\n    };\n\n    this.state = {\n      isFetching: false,\n      FetchingTime: 100,\n      data: {\n        studentImage: undefined\n      },\n      errorsExists: false,\n      errors: {\n        courseError: \"\",\n        fileError: \"\",\n        otherError: \"\"\n      },\n      messages: {}\n    };\n  } ///////////////////////// INPUT HANDLERS //////////////////////////////\n\n\n  applyAuthentication() {\n    const data = this.state.data;\n    const {\n      courseData,\n      studentImage\n    } = data;\n    return new Promise((resolve, reject) => {\n      /**\n       * Checking that has student aleast selected \n       * on course to enroll in\n       */\n      let courseDataError = true;\n\n      for (const key in courseData) {\n        if (courseData[key]) {\n          courseDataError = false;\n        }\n      }\n\n      if (courseDataError) {\n        this.setErrors({\n          courseError: \"Atleast Select one course\"\n        });\n      }\n      /**\n       * Checking if file have been uploaded or not\n       */\n\n\n      if (studentImage === undefined) {\n        this.setErrors({\n          fileError: \"Upload a File\"\n        });\n      }\n\n      resolve();\n    });\n  } ///////////////////////// ERROR HANDLERS ENDS//////////////////////////////////\n  //////////////////////// REQUEST RELATED FUNCTIONS ////////////////////////////\n\n\n  render() {\n    if (!this.state.isFetching) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Enroll_MainBody sidePage\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Enroll_Container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Enroll_FormContainer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"header\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 33\n        }\n      }, \"Add Course\")), /*#__PURE__*/React.createElement(\"form\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 37\n        }\n      }, \"Fetching ....\"))))));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"MainBody Enroll_MainBody sidePage\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Container Enroll_Container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"FormContainer Enroll_FormContainer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"header\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 33\n        }\n      }, \"Enroll\", /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 43\n        }\n      }, \"(\", this.props.students[0].roll_no, \")\"))), this.state.message && /*#__PURE__*/React.createElement(\"span\", {\n        className: \"confirmationMessage\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 52\n        }\n      }, this.state.message), this.state.errors.courseExist && /*#__PURE__*/React.createElement(\"span\", {\n        className: \"errorMessage\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 63\n        }\n      }, this.state.errors.courseExist), /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: this.onSubmit,\n        encType: \"multipart/form-data\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"inputErrorDiv\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 37\n        }\n      }, this.props.courses.map(course => {\n        const {\n          name,\n          department,\n          semester\n        } = course;\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: name + department + semester,\n          className: \"courseCheckboxDiv\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 56\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 61\n          }\n        }, /*#__PURE__*/React.createElement(\"input\", {\n          type: \"checkbox\",\n          id: name,\n          placeholder: \"\",\n          value: this.state.data[name],\n          onChange: this.onInputChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 61\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 61\n          }\n        }, /*#__PURE__*/React.createElement(\"label\", {\n          className: \"Label\",\n          htmlFor: name,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 61\n          }\n        }, name, \" \", this.state.messages[name] && /*#__PURE__*/React.createElement(\"span\", {\n          className: \"confirmationMessage\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 102\n          }\n        }, this.state.messages[name]))));\n      }), this.state.errors.courseError && /*#__PURE__*/React.createElement(\"span\", {\n        className: \"errorMessage\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 71\n        }\n      }, this.state.errors.courseError))), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        className: \"Label\",\n        htmlFor: \"name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 37\n        }\n      }, \"Upload Image\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"inputErrorDiv\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"inputDiv\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"file\",\n        id: \"studentImage\",\n        placeholder: \"\",\n        onChange: this.onFileInputChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 45\n        }\n      })), this.state.errors.fileError && /*#__PURE__*/React.createElement(\"span\", {\n        className: \"errorMessage\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 73\n        }\n      }, this.state.errors.fileError))), /*#__PURE__*/React.createElement(\"button\", {\n        className: \"Button\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 33\n        }\n      }, \"Enroll\")))));\n    }\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    students: state.students,\n    courses: state.courses\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setStudents: (filters, projection) => dispatch(getAndSetStudents(filters, projection)),\n    setCourses: (filters, projection) => dispatch(getAndSetCourses(filters, projection))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EnrollToCoursePage);","map":{"version":3,"sources":["C:/Users/USER/Downloads/PBL5_Demo/PBL5_Demo/Frontend/src/components/EnrollToCoursePage/EnrollToCoursePage.js"],"names":["React","Component","connect","getAndSetStudents","getAndSetCourses","getUsernameFromCookie","setInputState","EnrollToCoursePage","constructor","props","onFileInputChange","e","value","target","files","setState","prevState","data","studentImage","onInputChange","name","id","state","courseData","setErrors","toUpdate","errors","console","log","errorsExists","clearAllErrors","roll_no","otherError","handleResponse","responseArray","forEach","response","message","status","result","call","makeRequest","requestUrl","formData","FormData","append","JSON","stringify","stdents","u","options","method","body","fetch","then","ok","Error","json","catch","error","onSubmit","preventDefault","applyAuthentication","url","componentDidMount","studentFilters","username","studentProjection","setStudents","loggedStudent","students","department","semester","courseFilters","courseProjection","setCourses","courses","course","isFetching","FetchingTime","undefined","courseError","fileError","messages","Promise","resolve","reject","courseDataError","key","render","courseExist","map","mapStateToProps","mapDispatchToProps","dispatch","filters","projection"],"mappings":"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","sourcesContent":["import React , { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport { getAndSetStudents } from '../../actions/students';\nimport getAndSetCourses from '../../actions/courses';\nimport { getUsernameFromCookie } from '../../helperFunction/getCookie';\nimport setInputState from '../../genericFunctions/setInputState';\n\nimport './_enrollToCoursePage.scss';\n\nclass EnrollToCoursePage extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            isFetching: false,\n            FetchingTime : 100 ,\n            data: {\n                studentImage: undefined\n            },\n            errorsExists: false,\n            errors:{\n                courseError: \"\",\n                fileError: \"\",\n                otherError: \"\"\n            },\n            messages: {} \n        }\n    }\n\n\n    ///////////////////////// INPUT HANDLERS //////////////////////////////\n    \n    onFileInputChange = (e) => {\n        const value = e.target.files[0];\n         //setInputState.call(this,\"\")\n        this.setState((prevState)=>{\n            return {\n                data: {\n                    ...prevState.data,\n                    studentImage:value\n                }\n            }\n        })\n        \n    }\n    \n    onInputChange = (e)=>{\n        const name = e.target.id;\n        const value = !(this.state.data.courseData[name]);\n\n        this.setState((prevState)=>{\n            return {\n                data: {\n                    ...prevState.data, \n                    courseData : {\n                        ...prevState.data.courseData,\n                        [name] : value\n                    }\n                 }\n            }\n        })\n    }\n\n    ///////////////////////// INPUT HANDLERS ENDS//////////////////////////////\n\n\n    ///////////////////////// ERROR HANDLERS //////////////////////////////////\n\n    setErrors = (toUpdate)=>{\n        this.setState((prevState) =>{\n            return {\n                errors:{\n                    ...prevState.errors,\n                    ...toUpdate\n                }\n            }\n        },()=> console.log(this.state.errors))\n        this.setState({errorsExists: true});\n    }\n    \n    clearAllErrors = ()=>{\n        this.setErrors({\n            roll_no: \"\",\n            otherError: \"\"\n        })\n        this.setState({errorsExists: false});\n    }\n\n    \n    applyAuthentication(){\n        const data = this.state.data;\n\n        const { courseData, studentImage } = data\n        return new Promise((resolve,reject)=>{\n            /**\n             * Checking that has student aleast selected \n             * on course to enroll in\n             */\n            let courseDataError = true\n    \n            for( const key in courseData){\n                if(courseData[key]){ courseDataError = false}\n            }\n    \n            if(courseDataError){\n                this.setErrors({courseError: \"Atleast Select one course\"})\n            }\n    \n            /**\n             * Checking if file have been uploaded or not\n             */\n            if(studentImage === undefined){\n                this.setErrors({fileError: \"Upload a File\"})\n            }\n            resolve();\n        })\n    }\n\n    \n    ///////////////////////// ERROR HANDLERS ENDS//////////////////////////////////\n\n\n    //////////////////////// REQUEST RELATED FUNCTIONS ////////////////////////////\n\n\n    handleResponse = (responseArray)=>{\n        /**\n         * Array of response if send each for each course\n         * which student option to select \n         */\n        responseArray.forEach(response => {\n            const { name } = response;\n            const { message , status } = response.result;\n            if(response.status === 200){\n                switch(status){\n                    case 201:\n                        console.log(message)\n                        setInputState.call(this,\"messages\",name,message)\n                        break;\n                    case 409:\n                        console.log(message)\n                        setInputState.call(this,\"messages\",name,message)\n                        break\n                    case 400:\n                        this.setErrors({\n                            otherError: message\n                        })\n                        console.log(message)\n                        break;\n                        default:\n                            break\n                        }\n            }\n        })\n    }\n\n    // Trong phần makeRequest của component EnrollToCoursePage\n\nmakeRequest = (requestUrl) => {\n    let formData = new FormData();\n    \n    const { studentImage, courseData } = this.state.data;\n\n    // Thêm dữ liệu file và thông tin khác vào formData\n    formData.append('file', studentImage)\n    formData.append(\"courseData\", JSON.stringify(courseData));\n    formData.append(\"roll_no\", this.props.stdents[0].roll_no)\nu\n    const options = {\n        method: 'POST',\n        body: formData\n    }\n    if (!this.state.errorsExists) {\n        fetch(requestUrl, options)\n        .then(response => {\n            if (!response.ok) {\n                throw new Error('Network response was not ok');\n            }\n            return response.json();\n        })\n        .then(responseArray => this.handleResponse(responseArray))\n        .catch(error => {\n            console.error('Error:', error);   \n        });\n    }\n}\n\n                    \n    onSubmit = (e)=>{\n        e.preventDefault();\n\n        this.clearAllErrors();\n        this.applyAuthentication()\n\n        /**\n         * IF THERE IS NO ERRORS ONLY THEN \n         * MAKE THE REQUEST OTHERWISE DO NOTHING\n         * \n         * AND \n         * \n         * THERE WILL BE SHOWING ERROR ON THE FORM IF ANY EXIST\n        */\n        .then(()=>{\n            console.log(\"IN\")\n            const url = \"http://localhost:5000/enroll_student\"\n            this.makeRequest(url); \n        })\n        \n    }\n    \n    //////////////////////// REQUEST RELATED FUNCTIONS ENDS////////////////////////////\n\n    componentDidMount = ()=>{\n\n        /* \n            Set Student Filters and Projection \n            to get only Specified part of current Student\n        */\n\n        const studentFilters = {\n            username: getUsernameFromCookie()\n        }\n        const studentProjection = {\n            \"department\": true,\"semester\": true, \"roll_no\": true\n        }\n        /* \n            Make a Asnc Request to get the student details\n            Note :- It will return a Promise\n        */\n        this.props.setStudents(studentFilters,studentProjection)\n        .then(()=>{\n\n            /* \n                Now Set Filter and Projection to Get \n                Only Coures Related to the loogedIn Student\n            */\n            const loggedStudent = this.props.students[0];\n            const { department, semester } =loggedStudent;\n\n            const courseFilters = { department,semester }\n            const courseProjection = { \"name\": true }\n\n            /* \n                Make the Asnc Request to get the Courses \n            */\n            this.props.setCourses(courseFilters, courseProjection)\n            .then(()=> {\n\n                /*\n                    Set False For all Course in The State\n                    \"FALSE\" represents that CheckBox is unchecked\n                    and will be change to True when CheckBox is Checked\n                */\n                this.props.courses.forEach(course => {\n                    this.setState(prevState => {\n                        return {\n                            data: {\n                                ...prevState.data, \n                                courseData : {\n                                    ...prevState.data.courseData,\n                                    [course.name] : false\n                                }\n                                }\n                        }\n                    })\n                });\n                this.setState({isFetching: true})\n            })\n        })\n    }\n        \n    render() {\n        if(!this.state.isFetching){\n            return (\n                <div className=\"Enroll_MainBody sidePage\">\n                    <div className=\"Enroll_Container\">\n                        <div className=\"Enroll_FormContainer\">\n                            <header>\n                                <h1>Add Course</h1>\n                            </header>\n                            <form>\n                                <div>\n                                    <p>Fetching ....</p>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            )\n        }else{\n            return (\n                <div className=\"MainBody Enroll_MainBody sidePage\">\n                    <div className=\"Container Enroll_Container\">\n                        <div className=\"FormContainer Enroll_FormContainer\">\n                            <header>\n                                <h1>\n                                    Enroll<span>({this.props.students[0].roll_no})</span>\n                                </h1>\n                            </header>\n                            {this.state.message && <span className=\"confirmationMessage\">{this.state.message}</span>}\n                            {this.state.errors.courseExist && <span className=\"errorMessage\">{this.state.errors.courseExist}</span>}\n                            <form onSubmit={this.onSubmit} encType=\"multipart/form-data\">\n                                <div>\n                                    <div className=\"inputErrorDiv\">\n                                    {\n                                            this.props.courses.map(course =>{\n                                                const { name, department, semester } = course\n                                                return <div key={ name+department+semester } className=\"courseCheckboxDiv\">\n                                                            <div>\n                                                            <input\n                                                                type=\"checkbox\"\n                                                                id={name}\n                                                                placeholder=\"\"\n                                                                value={this.state.data[name]}\n                                                                onChange={this.onInputChange}\n                                                            />\n                                                            </div>\n                                                            <div>\n                                                            <label \n                                                                className=\"Label\"\n                                                                htmlFor={name}\n                                                            >\n                                                                {name} {this.state.messages[name] && <span className=\"confirmationMessage\" >{this.state.messages[name]}</span>}\n                                                            </label>\n                                                            </div>\n                                                        </div>\n                                            })\n                                    }\n                                    {this.state.errors.courseError && <span className=\"errorMessage\">{this.state.errors.courseError}</span>}\n                                    </div>\n                                </div>\n\n                                <div>\n                                    <label \n                                        className=\"Label\"\n                                        htmlFor=\"name\"\n                                    >\n                                        Upload Image\n                                    </label>\n                                    <div className=\"inputErrorDiv\">\n                                        <div className=\"inputDiv\">\n                                            <input\n                                                type=\"file\"\n                                                id=\"studentImage\"\n                                                placeholder=\"\"\n                                                onChange={this.onFileInputChange}\n                                            />\n                                        </div>\n                                        {this.state.errors.fileError && <span className=\"errorMessage\">{this.state.errors.fileError}</span>}\n                                    </div>\n                                </div>\n                                <button className=\"Button\">\n                                    Enroll\n                                </button>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            )\n        }\n    }\n}\n\nconst mapStateToProps = (state)=>{\n    return {\n        students: state.students,\n        courses: state.courses\n    }\n}\n\nconst mapDispatchToProps = (dispatch)=>{\n    return{\n        setStudents : (filters,projection) => dispatch(getAndSetStudents(filters,projection)),\n        setCourses : (filters,projection) => dispatch(getAndSetCourses(filters,projection))\n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(EnrollToCoursePage);"]},"metadata":{},"sourceType":"module"}