{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Downloads\\\\PBL5_Demo\\\\PBL5_Demo\\\\Frontend\\\\src\\\\components\\\\AttendancePage\\\\AttendancePage.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getAndSetTeachers } from '../../actions/teachers';\nimport getAndSetCourses from '../../actions/courses';\nimport { getUsernameFromCookie } from '../../helperFunction/getCookie';\nimport StudentComponent from './StudentComponent';\nimport setInputState from '../../genericFunctions/setInputState';\nimport clearMessage from '../../genericFunctions/clearMessage'; // import './_attendancePage.scss';\n\n/**\n * NOTE :- \n *  FOR THIS PAGE WE CANT USE ANY GENERIC FUNCTION \n *  BCOZ HANDLING OF FILES IS DIFFERENT THAT SIMPLE DATA\n *  AND THEREFORE NEED DIFFERENT handleSubmit and makeReqeust\n */\n\nclass AttendancePage extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onFileInputChange = e => {\n      const value = e.target.files[0];\n      setInputState.call(this, \"data\", \"image\", value);\n    };\n\n    this.getAndSetTeacherRelatedCourses = () => {\n      const courseFilters = {\n        teacherAssigned: this.props.teachers[0]['name']\n      };\n      const courseProjection = {};\n      return this.props.setCourses(courseFilters, courseProjection);\n    };\n\n    this.onInputChange = e => {\n      const value = e.target.value;\n      /* AT THIS POINT IT IS POSSIBLE COURSES IN THE STATE\n      * IS JUST ONE COURSES WHICH WAS SELECTED WHILE MAKING ATTENDANCE\n      * BCOZ WHEN WE MAKE ATTENDANCE WE JUST GET ATTENDANCE INFO OF A\n      * SINGLE COURSE SO NOW WE ONLY HAVE DATA OF ONE COURSE IN STORE \n      * \n      * AND\n      * \n      * => ON SWITCHING TO DIFFERENT COURSE \n      * WE FIRST NEED TO GET ALL THE COURSE AGAIN \n      */\n\n      this.getAndSetTeacherRelatedCourses().then(() => {\n        const currentSelectedCourse = this.props.courses.filter(course => course.name === value)[0];\n        const {\n          department\n        } = this.props.teachers[0];\n        const {\n          name,\n          semester\n        } = currentSelectedCourse;\n        setInputState.call(this, \"data\", \"courseData\", {\n          name,\n          department,\n          semester\n        }).then(this.setTodaysAttendance);\n        /* GET ATTENDANCE OF COURSE SELECTED IN DROP DOWN */\n      }); // console.log(\"run\")\n    };\n\n    this.setErrors = toUpdate => {\n      this.setState(prevState => {\n        return {\n          errors: { ...prevState.errors,\n            ...toUpdate\n          }\n        };\n      });\n      this.setState({\n        errorsExists: true\n      });\n    };\n\n    this.clearAllErrors = () => {\n      this.setErrors({\n        fileError: \"\",\n        otherError: \"\"\n      });\n      this.setState({\n        errorsExists: false\n      });\n    };\n\n    this.setTodaysAttendance = () => {\n      const currentCourseName = this.state.data.courseData.name;\n      /**\n       *  We already have fetched the all related courses for the teacher\n       * but still are making the request again because in the initial request\n       * we dont get the attendance of course(bcoz it would have wasted the band-width)\n       * now we only are fetch attendance of this course(which is selected) not for all of them\n       */\n\n      this.props.setCourses({\n        \"name\": currentCourseName\n      }).then(() => {\n        const AttendanceArray = this.props.courses[0]['attendance']; // GET TODAYS DATE\n\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n\n        var yyyy = today.getFullYear();\n        today = yyyy + '-' + mm + '-' + dd;\n        let todaysAttendance; /// fall to catch if attendance not done yet\n\n        try {\n          todaysAttendance = AttendanceArray.filter(attendance => attendance.date === today)[0]['attendance_on_date'];\n        } catch {\n          todaysAttendance = false;\n        }\n\n        this.setState({\n          todaysAttendance\n        });\n      });\n    };\n\n    this.handleResponse = response => {\n      const {\n        message,\n        status\n      } = response.result;\n\n      if (response.status === 200) {\n        switch (status) {\n          case 201:\n            console.log(message);\n            this.setState(prevState => ({\n              messages: message\n            }), clearMessage.bind(this, 3000)); // DISPLAY ATTENDANCE AFTER IT IS DONE\n\n            this.setTodaysAttendance();\n            break;\n\n          case 400:\n            console.log(message);\n            this.setState(prevState => ({\n              messages: message\n            }));\n            break;\n\n          case 401:\n            console.log(message);\n            this.setState(prevState => {\n              return { ...prevState,\n                errors: { ...prevState.errors,\n                  otherError: message\n                }\n              };\n            });\n            break;\n\n          default:\n            break;\n        }\n      }\n    };\n\n    this.makeRequest = requestUrl => {\n      let formData = new FormData();\n      const {\n        image,\n        courseData\n      } = this.state.data;\n      formData.append('file', image);\n      formData.append(\"courseData\", JSON.stringify(courseData));\n      const options = {\n        method: 'POST',\n        body: formData\n      };\n\n      if (!this.state.errorsExists) {\n        fetch(requestUrl, options).then(response => response.json()).then(response => this.handleResponse(response));\n      }\n    };\n\n    this.onSubmit = e => {\n      e.preventDefault();\n      /**\n       * FIRST CLEAR ALL ERROR \n       * AND\n       * APPLY AUTHENTICATION TO CHECK FOR ERRORS\n      */\n\n      this.clearAllErrors();\n      this.applyAuthentication().then(() => {\n        setTimeout(() => {\n          this.clearAllErrors();\n        }, 3000);\n      })\n      /**\n       * IF THERE IS NO ERRORS ONLY THEN \n       * MAKE THE REQUEST OTHERWISE DO NOTHING\n       * \n       * AND \n       * \n       * THERE WILL BE SHOWING ERROR ON THE FORM IF ANY EXIST\n      */\n      .then(() => {\n        const url = \"http://localhost:5000/initiate_attendence\";\n        this.makeRequest(url);\n      });\n    };\n\n    this.componentDidMount = () => {\n      // CREATE TEACHER FILTERS & PEOJECTION FOR BACKEND USE\n      const teacherFilters = {\n        \"username\": getUsernameFromCookie()\n      };\n      const teacherProjection = {\n        \"name\": true,\n        \"department\": true\n      }; // Request will be made to backend with filters & projection \n      //to get current Teacher\n\n      this.props.setTeachers(teacherFilters, teacherProjection) //WILL RETURN A PROMISE\n      .then(() => {\n        const {\n          name,\n          department\n        } = this.props.teachers[0]; // CREATE COURSE FILTERS & PEOJECTION FOR BACKEND USE\n\n        const courseFilters = {\n          \"teacherAssigned\": name,\n          \"department\": department\n        };\n        const courseProjection = {}; // Request will be made to backend with filter & projection \n        //to get course assigned to current Teacher\n\n        this.props.setCourses(courseFilters, courseProjection) //WILL RETURN A PROMISE\n        .then(() => {\n          // GET ALL TEACHER RELATED COURSES\n          const relatedCourses = this.props.courses;\n\n          if (relatedCourses) {\n            this.setState(prevState => {\n              return {\n                isFetching: true,\n                relatedCourses,\n                data: { ...prevState.data,\n                  courseData: {\n                    \"name\": relatedCourses[0]['name'],\n                    \"department\": relatedCourses[0]['department'],\n                    \"semester\": relatedCourses[0]['semester']\n                  }\n                }\n              };\n            }); // Show the attendance if already done\n\n            this.setTodaysAttendance();\n          }\n        });\n      });\n    };\n\n    this.state = {\n      isFetching: false,\n      FetchingTime: 100,\n      data: {\n        image: undefined,\n        courseData: {}\n      },\n      errorsExists: false,\n      errors: {\n        fileError: \"\",\n        otherError: \"\"\n      },\n      messages: \"\"\n    };\n  } //////////////////////////////////// INPUT HANDLERS ///////////////////////////////////////\n\n\n  applyAuthentication() {\n    const {\n      image\n    } = this.state.data;\n    return new Promise((resovle, reject) => {\n      if (image === undefined) {\n        this.setErrors({\n          fileError: \"Upload a File\"\n        });\n      }\n\n      resovle();\n    });\n  } //////////////////////////////////// ERROR HANDLERS ENDS///////////////////////////////////////\n  //////////////////////////////////// REQUEST RELATED FUNCTIONS ///////////////////////////////////////\n\n\n  /////////////////////////////   RENDER FUNCTIONS ///////////////////////////////////////////\n  render() {\n    if (!this.state.isFetching) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"MainBody sidePage\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"FormContainer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"header\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 29\n        }\n      }, \"Attendance\")), /*#__PURE__*/React.createElement(\"form\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 33\n        }\n      }, \"Fetching ....\"))))));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"MainBody sidePage\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"FormContainer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"header\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 29\n        }\n      }, \"Attendance\")), this.state.messages && /*#__PURE__*/React.createElement(\"span\", {\n        className: \"confirmationMessage\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 49\n        }\n      }, this.state.messages), this.state.errors.otherError && /*#__PURE__*/React.createElement(\"span\", {\n        className: \"errorMessage\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 58\n        }\n      }, this.state.errors.otherError), this.state.errors.courseExist && /*#__PURE__*/React.createElement(\"span\", {\n        className: \"errorMessage\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 59\n        }\n      }, this.state.errors.courseExist), /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: this.onSubmit,\n        encType: \"multipart/form-data\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        className: \"Label\",\n        htmlFor: \"course\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 33\n        }\n      }, \"Course\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"selectDiv\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"select\", {\n        id: \"course\",\n        name: \"course\",\n        onChange: this.onInputChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 37\n        }\n      }, this.state.relatedCourses.map(course => {\n        const {\n          name\n        } = course;\n        return /*#__PURE__*/React.createElement(\"option\", {\n          key: name,\n          value: name,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 56\n          }\n        }, name);\n      })))), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        className: \"Label\",\n        htmlFor: \"name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 33\n        }\n      }, \"Upload Image\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"inputErrorDiv\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"inputDiv\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"file\",\n        id: \"image\",\n        placeholder: \"\",\n        onChange: this.onFileInputChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 41\n        }\n      })), this.state.errors.fileError && /*#__PURE__*/React.createElement(\"span\", {\n        className: \"errorMessage\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 69\n        }\n      }, this.state.errors.fileError))), /*#__PURE__*/React.createElement(\"button\", {\n        className: \"Button\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 29\n        }\n      }, \"make Attendance\")))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"ListBlock\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"header\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 21\n        }\n      }, \" All Students \")), this.state.todaysAttendance && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"student_MainContainer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"ol\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 25\n        }\n      }, this.state.todaysAttendance.map(attendance => {\n        const {\n          roll_no,\n          status\n        } = attendance;\n        return /*#__PURE__*/React.createElement(\"li\", {\n          key: roll_no,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 44\n          }\n        }, /*#__PURE__*/React.createElement(StudentComponent, {\n          roll_no: roll_no,\n          status: status,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 49\n          }\n        }));\n      })))));\n    }\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    teachers: state.teachers,\n    courses: state.courses\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setTeachers: (filters, projection) => dispatch(getAndSetTeachers(filters, projection)),\n    setCourses: (filters, projection) => dispatch(getAndSetCourses(filters, projection))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AttendancePage);","map":{"version":3,"sources":["C:/Users/USER/Downloads/PBL5_Demo/PBL5_Demo/Frontend/src/components/AttendancePage/AttendancePage.js"],"names":["React","Component","connect","getAndSetTeachers","getAndSetCourses","getUsernameFromCookie","StudentComponent","setInputState","clearMessage","AttendancePage","constructor","props","onFileInputChange","e","value","target","files","call","getAndSetTeacherRelatedCourses","courseFilters","teacherAssigned","teachers","courseProjection","setCourses","onInputChange","then","currentSelectedCourse","courses","filter","course","name","department","semester","setTodaysAttendance","setErrors","toUpdate","setState","prevState","errors","errorsExists","clearAllErrors","fileError","otherError","currentCourseName","state","data","courseData","AttendanceArray","today","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","todaysAttendance","attendance","date","handleResponse","response","message","status","result","console","log","messages","bind","makeRequest","requestUrl","formData","FormData","image","append","JSON","stringify","options","method","body","fetch","json","onSubmit","preventDefault","applyAuthentication","setTimeout","url","componentDidMount","teacherFilters","teacherProjection","setTeachers","relatedCourses","isFetching","FetchingTime","undefined","Promise","resovle","reject","render","courseExist","map","roll_no","mapStateToProps","mapDispatchToProps","dispatch","filters","projection"],"mappings":";AAAA,OAAOA,KAAP,IAAiBC,SAAjB,QAAkC,OAAlC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,iBAAT,QAAkC,wBAAlC;AACA,OAAOC,gBAAP,MAA6B,uBAA7B;AACA,SAASC,qBAAT,QAAsC,gCAAtC;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AAEA,OAAOC,aAAP,MAA0B,sCAA1B;AACA,OAAOC,YAAP,MAAyB,qCAAzB,C,CAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,cAAN,SAA6BR,SAA7B,CAAsC;AAClCS,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;;AADc,SAoBlBC,iBApBkB,GAoBGC,CAAD,IAAO;AACvB,YAAMC,KAAK,GAAGD,CAAC,CAACE,MAAF,CAASC,KAAT,CAAe,CAAf,CAAd;AACAT,MAAAA,aAAa,CAACU,IAAd,CAAmB,IAAnB,EAAwB,MAAxB,EAA+B,OAA/B,EAAuCH,KAAvC;AACH,KAvBiB;;AAAA,SAyBlBI,8BAzBkB,GAyBe,MAAI;AACjC,YAAMC,aAAa,GAAE;AACjBC,QAAAA,eAAe,EAAG,KAAKT,KAAL,CAAWU,QAAX,CAAoB,CAApB,EAAuB,MAAvB;AADD,OAArB;AAGA,YAAMC,gBAAgB,GAAG,EAAzB;AACA,aAAO,KAAKX,KAAL,CAAWY,UAAX,CAAsBJ,aAAtB,EAAqCG,gBAArC,CAAP;AACH,KA/BiB;;AAAA,SAiClBE,aAjCkB,GAiCDX,CAAD,IAAK;AACjB,YAAMC,KAAK,GAAGD,CAAC,CAACE,MAAF,CAASD,KAAvB;AAEA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEQ,WAAKI,8BAAL,GACCO,IADD,CACM,MAAI;AACN,cAAMC,qBAAqB,GAAG,KAAKf,KAAL,CAAWgB,OAAX,CAAmBC,MAAnB,CAA0BC,MAAM,IAAIA,MAAM,CAACC,IAAP,KAAgBhB,KAApD,EAA2D,CAA3D,CAA9B;AACA,cAAM;AAAEiB,UAAAA;AAAF,YAAiB,KAAKpB,KAAL,CAAWU,QAAX,CAAoB,CAApB,CAAvB;AACA,cAAM;AAAES,UAAAA,IAAF;AAAQE,UAAAA;AAAR,YAAqBN,qBAA3B;AAEAnB,QAAAA,aAAa,CAACU,IAAd,CAAmB,IAAnB,EAAwB,MAAxB,EAA+B,YAA/B,EAA4C;AACxCa,UAAAA,IADwC;AACnCC,UAAAA,UADmC;AACxBC,UAAAA;AADwB,SAA5C,EAGCP,IAHD,CAGM,KAAKQ,mBAHX;AAG+B;AAClC,OAVD,EAdiB,CAyBjB;AACH,KA3DiB;;AAAA,SAmElBC,SAnEkB,GAmELC,QAAD,IAAY;AACpB,WAAKC,QAAL,CAAeC,SAAD,IAAc;AACxB,eAAO;AACHC,UAAAA,MAAM,EAAC,EACH,GAAGD,SAAS,CAACC,MADV;AAEH,eAAGH;AAFA;AADJ,SAAP;AAMH,OAPD;AAQA,WAAKC,QAAL,CAAc;AAACG,QAAAA,YAAY,EAAE;AAAf,OAAd;AACH,KA7EiB;;AAAA,SA+ElBC,cA/EkB,GA+ED,MAAI;AACjB,WAAKN,SAAL,CAAe;AACXO,QAAAA,SAAS,EAAE,EADA;AAEXC,QAAAA,UAAU,EAAE;AAFD,OAAf;AAIA,WAAKN,QAAL,CAAc;AAACG,QAAAA,YAAY,EAAE;AAAf,OAAd;AACH,KArFiB;;AAAA,SA4GlBN,mBA5GkB,GA4GI,MAAM;AACxB,YAAMU,iBAAiB,GAAG,KAAKC,KAAL,CAAWC,IAAX,CAAgBC,UAAhB,CAA2BhB,IAArD;AACA;AACR;AACA;AACA;AACA;AACA;;AACQ,WAAKnB,KAAL,CAAWY,UAAX,CAAsB;AAClB,gBAAQoB;AADU,OAAtB,EAIClB,IAJD,CAIM,MAAI;AACN,cAAMsB,eAAe,GAAG,KAAKpC,KAAL,CAAWgB,OAAX,CAAmB,CAAnB,EAAsB,YAAtB,CAAxB,CADM,CAGN;;AACA,YAAIqB,KAAK,GAAG,IAAIC,IAAJ,EAAZ;AACA,YAAIC,EAAE,GAAGC,MAAM,CAACH,KAAK,CAACI,OAAN,EAAD,CAAN,CAAwBC,QAAxB,CAAiC,CAAjC,EAAoC,GAApC,CAAT;AACA,YAAIC,EAAE,GAAGH,MAAM,CAACH,KAAK,CAACO,QAAN,KAAmB,CAApB,CAAN,CAA6BF,QAA7B,CAAsC,CAAtC,EAAyC,GAAzC,CAAT,CANM,CAMkD;;AACxD,YAAIG,IAAI,GAAGR,KAAK,CAACS,WAAN,EAAX;AAEAT,QAAAA,KAAK,GAAGQ,IAAI,GAAG,GAAP,GAAaF,EAAb,GAAkB,GAAlB,GAAwBJ,EAAhC;AACA,YAAIQ,gBAAJ,CAVM,CAYN;;AACA,YAAG;AACCA,UAAAA,gBAAgB,GAAGX,eAAe,CAACnB,MAAhB,CAAuB+B,UAAU,IAAIA,UAAU,CAACC,IAAX,KAAoBZ,KAAzD,EAAiE,CAAjE,EAAoE,oBAApE,CAAnB;AACH,SAFD,CAEC,MAAK;AACFU,UAAAA,gBAAgB,GAAG,KAAnB;AACH;;AACD,aAAKtB,QAAL,CAAc;AAACsB,UAAAA;AAAD,SAAd;AACH,OAvBD;AAyBH,KA7IiB;;AAAA,SA+IlBG,cA/IkB,GA+IAC,QAAD,IAAY;AACzB,YAAM;AAAEC,QAAAA,OAAF;AAAYC,QAAAA;AAAZ,UAAuBF,QAAQ,CAACG,MAAtC;;AACA,UAAGH,QAAQ,CAACE,MAAT,KAAoB,GAAvB,EAA2B;AACvB,gBAAOA,MAAP;AACI,eAAK,GAAL;AACIE,YAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;AACA,iBAAK3B,QAAL,CAAcC,SAAS,KAAK;AACxB+B,cAAAA,QAAQ,EAAEL;AADc,aAAL,CAAvB,EAEGvD,YAAY,CAAC6D,IAAb,CAAkB,IAAlB,EAAuB,IAAvB,CAFH,EAFJ,CAMI;;AACA,iBAAKpC,mBAAL;AACA;;AACJ,eAAK,GAAL;AACIiC,YAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;AACA,iBAAK3B,QAAL,CAAcC,SAAS,KAAK;AACxB+B,cAAAA,QAAQ,EAAEL;AADc,aAAL,CAAvB;AAGA;;AACJ,eAAK,GAAL;AACIG,YAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;AACA,iBAAK3B,QAAL,CAAcC,SAAS,IAAI;AACvB,qBAAO,EACH,GAAGA,SADA;AAEHC,gBAAAA,MAAM,EAAG,EACL,GAAGD,SAAS,CAACC,MADR;AAELI,kBAAAA,UAAU,EAAEqB;AAFP;AAFN,eAAP;AAOH,aARD;AASA;;AACA;AACI;AA7BZ;AA+BH;AACJ,KAlLiB;;AAAA,SAqLlBO,WArLkB,GAqLHC,UAAD,IAAe;AACzB,UAAIC,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACA,YAAM;AAAEC,QAAAA,KAAF;AAAS5B,QAAAA;AAAT,UAAyB,KAAKF,KAAL,CAAWC,IAA1C;AAEA2B,MAAAA,QAAQ,CAACG,MAAT,CAAgB,MAAhB,EAAwBD,KAAxB;AACAF,MAAAA,QAAQ,CAACG,MAAT,CAAgB,YAAhB,EAA6BC,IAAI,CAACC,SAAL,CAAe/B,UAAf,CAA7B;AAEA,YAAMgC,OAAO,GAAG;AACZC,QAAAA,MAAM,EAAE,MADI;AAEZC,QAAAA,IAAI,EAAER;AAFM,OAAhB;;AAKA,UAAG,CAAC,KAAK5B,KAAL,CAAWL,YAAf,EAA4B;AACxB0C,QAAAA,KAAK,CAACV,UAAD,EAAYO,OAAZ,CAAL,CACCrD,IADD,CACMqC,QAAQ,IAAIA,QAAQ,CAACoB,IAAT,EADlB,EAECzD,IAFD,CAEMqC,QAAQ,IAAI,KAAKD,cAAL,CAAoBC,QAApB,CAFlB;AAGH;AACJ,KAtMiB;;AAAA,SA0MlBqB,QA1MkB,GA0MNtE,CAAD,IAAK;AACZA,MAAAA,CAAC,CAACuE,cAAF;AAEA;AACR;AACA;AACA;AACA;;AACQ,WAAK5C,cAAL;AACA,WAAK6C,mBAAL,GACC5D,IADD,CACM,MAAI;AACN6D,QAAAA,UAAU,CAAC,MAAI;AACX,eAAK9C,cAAL;AACH,SAFS,EAER,IAFQ,CAAV;AAGH,OALD;AAMA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AAbQ,OAcCf,IAdD,CAcM,MAAI;AACN,cAAM8D,GAAG,GAAG,2CAAZ;AACA,aAAKjB,WAAL,CAAiBiB,GAAjB;AACH,OAjBD;AAkBH,KArOiB;;AAAA,SA4OlBC,iBA5OkB,GA4OE,MAAI;AACpB;AACA,YAAMC,cAAc,GAAG;AACnB,oBAAYpF,qBAAqB;AADd,OAAvB;AAGA,YAAMqF,iBAAiB,GAAG;AACtB,gBAAQ,IADc;AAEtB,sBAAc;AAFQ,OAA1B,CALoB,CAUpB;AACA;;AACA,WAAK/E,KAAL,CAAWgF,WAAX,CAAuBF,cAAvB,EAAsCC,iBAAtC,EAAyD;AAAzD,OACCjE,IADD,CACM,MAAK;AACP,cAAM;AAAEK,UAAAA,IAAF;AAAQC,UAAAA;AAAR,YAAuB,KAAKpB,KAAL,CAAWU,QAAX,CAAoB,CAApB,CAA7B,CADO,CAGX;;AAEI,cAAMF,aAAa,GAAG;AAClB,6BAAmBW,IADD;AAElB,wBAAcC;AAFI,SAAtB;AAIA,cAAMT,gBAAgB,GAAG,EAAzB,CATO,CAWP;AACA;;AACA,aAAKX,KAAL,CAAWY,UAAX,CAAsBJ,aAAtB,EAAoCG,gBAApC,EAAsD;AAAtD,SACCG,IADD,CACM,MAAI;AACN;AACA,gBAAMmE,cAAc,GAAG,KAAKjF,KAAL,CAAWgB,OAAlC;;AACA,cAAGiE,cAAH,EAAkB;AACd,iBAAKxD,QAAL,CAAcC,SAAS,IAAG;AACtB,qBAAO;AACHwD,gBAAAA,UAAU,EAAE,IADT;AAEHD,gBAAAA,cAFG;AAGH/C,gBAAAA,IAAI,EAAE,EACF,GAAGR,SAAS,CAACQ,IADX;AAEFC,kBAAAA,UAAU,EAAG;AACT,4BAAS8C,cAAc,CAAC,CAAD,CAAd,CAAkB,MAAlB,CADA;AAET,kCAAeA,cAAc,CAAC,CAAD,CAAd,CAAkB,YAAlB,CAFN;AAGT,gCAAaA,cAAc,CAAC,CAAD,CAAd,CAAkB,UAAlB;AAHJ;AAFX;AAHH,eAAP;AAYH,aAbD,EADc,CAgBd;;AACA,iBAAK3D,mBAAL;AACH;AACJ,SAvBD;AAwBH,OAtCD;AAuCH,KA/RiB;;AAEd,SAAKW,KAAL,GAAa;AACTiD,MAAAA,UAAU,EAAE,KADH;AAETC,MAAAA,YAAY,EAAG,GAFN;AAGTjD,MAAAA,IAAI,EAAE;AACF6B,QAAAA,KAAK,EAAEqB,SADL;AAEFjD,QAAAA,UAAU,EAAE;AAFV,OAHG;AAOTP,MAAAA,YAAY,EAAE,KAPL;AAQTD,MAAAA,MAAM,EAAC;AACHG,QAAAA,SAAS,EAAE,EADR;AAEHC,QAAAA,UAAU,EAAE;AAFT,OARE;AAYT0B,MAAAA,QAAQ,EAAE;AAZD,KAAb;AAcH,GAjBiC,CAmBlC;;;AAsEAiB,EAAAA,mBAAmB,GAAE;AACjB,UAAM;AAAEX,MAAAA;AAAF,QAAY,KAAK9B,KAAL,CAAWC,IAA7B;AAEA,WAAO,IAAImD,OAAJ,CAAY,CAACC,OAAD,EAASC,MAAT,KAAkB;AACjC,UAAGxB,KAAK,KAAKqB,SAAb,EAAuB;AACnB,aAAK7D,SAAL,CAAe;AAACO,UAAAA,SAAS,EAAE;AAAZ,SAAf;AACH;;AAEDwD,MAAAA,OAAO;AACV,KANM,CAAP;AAQH,GApGiC,CAuGlC;AAGA;;;AAyLA;AAEAE,EAAAA,MAAM,GAAG;AACT,QAAG,CAAC,KAAKvD,KAAL,CAAWiD,UAAf,EAA0B;AACtB,0BACI;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,CADJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADJ,CADJ,CAJJ,CADJ,CADJ,CADJ;AAgBH,KAjBD,MAiBK;AACD,0BACI;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,CADJ,EAMK,KAAKjD,KAAL,CAAWwB,QAAX,iBAAuB;AAAM,QAAA,SAAS,EAAC,qBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAuC,KAAKxB,KAAL,CAAWwB,QAAlD,CAN5B,EAOK,KAAKxB,KAAL,CAAWN,MAAX,CAAkBI,UAAlB,iBAAgC;AAAM,QAAA,SAAS,EAAC,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAgC,KAAKE,KAAL,CAAWN,MAAX,CAAkBI,UAAlD,CAPrC,EAQK,KAAKE,KAAL,CAAWN,MAAX,CAAkB8D,WAAlB,iBAAiC;AAAM,QAAA,SAAS,EAAC,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAgC,KAAKxD,KAAL,CAAWN,MAAX,CAAkB8D,WAAlD,CARtC,eASI;AAAM,QAAA,QAAQ,EAAE,KAAKjB,QAArB;AAA+B,QAAA,OAAO,EAAC,qBAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAO,QAAA,SAAS,EAAC,OAAjB;AAAyB,QAAA,OAAO,EAAC,QAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AACI,QAAA,EAAE,EAAC,QADP;AAEI,QAAA,IAAI,EAAC,QAFT;AAGI,QAAA,QAAQ,EAAE,KAAK3D,aAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMQ,KAAKoB,KAAL,CAAWgD,cAAX,CAA0BS,GAA1B,CAA+BxE,MAAM,IAAG;AACpC,cAAM;AAAEC,UAAAA;AAAF,YAAWD,MAAjB;AACA,4BAAO;AAAQ,UAAA,GAAG,EAAEC,IAAb;AAAmB,UAAA,KAAK,EAAEA,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAiCA,IAAjC,CAAP;AACH,OAHD,CANR,CADJ,CAFJ,CADJ,eAkBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AACI,QAAA,SAAS,EAAC,OADd;AAEI,QAAA,OAAO,EAAC,MAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,eAOI;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AACI,QAAA,IAAI,EAAC,MADT;AAEI,QAAA,EAAE,EAAC,OAFP;AAGI,QAAA,WAAW,EAAC,EAHhB;AAII,QAAA,QAAQ,EAAE,KAAKlB,iBAJnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,EASK,KAAKgC,KAAL,CAAWN,MAAX,CAAkBG,SAAlB,iBAA+B;AAAM,QAAA,SAAS,EAAC,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAgC,KAAKG,KAAL,CAAWN,MAAX,CAAkBG,SAAlD,CATpC,CAPJ,CAlBJ,eAqCI;AAAQ,QAAA,SAAS,EAAC,QAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BArCJ,CATJ,CADJ,CADJ,eAsDI;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,CADA,EAIC,KAAKG,KAAL,CAAWc,gBAAX,iBACG;AAAK,QAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEQ,KAAKd,KAAL,CAAWc,gBAAX,CAA4B2C,GAA5B,CAAgC1C,UAAU,IAAG;AACzC,cAAM;AAAC2C,UAAAA,OAAD;AAAUtC,UAAAA;AAAV,YAAoBL,UAA1B;AACA,4BAAO;AACC,UAAA,GAAG,EAAE2C,OADN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAEK,oBAAC,gBAAD;AACI,UAAA,OAAO,EAAEA,OADb;AAEQ,UAAA,MAAM,EAAEtC,MAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFL,CAAP;AAOH,OATD,CAFR,CADJ,CALJ,CAtDJ,CADJ;AAgFH;AACA;;AAzYiC;;AA4YtC,MAAMuC,eAAe,GAAI3D,KAAD,IAAS;AAC7B,SAAO;AACHvB,IAAAA,QAAQ,EAAEuB,KAAK,CAACvB,QADb;AAEHM,IAAAA,OAAO,EAAEiB,KAAK,CAACjB;AAFZ,GAAP;AAIH,CALD;;AAOA,MAAM6E,kBAAkB,GAAIC,QAAD,IAAY;AACnC,SAAM;AACFd,IAAAA,WAAW,EAAG,CAACe,OAAD,EAASC,UAAT,KAAwBF,QAAQ,CAACtG,iBAAiB,CAACuG,OAAD,EAASC,UAAT,CAAlB,CAD5C;AAEFpF,IAAAA,UAAU,EAAG,CAACmF,OAAD,EAASC,UAAT,KAAwBF,QAAQ,CAACrG,gBAAgB,CAACsG,OAAD,EAASC,UAAT,CAAjB;AAF3C,GAAN;AAIH,CALD;;AAOA,eAAezG,OAAO,CAACqG,eAAD,EAAiBC,kBAAjB,CAAP,CAA4C/F,cAA5C,CAAf","sourcesContent":["import React , { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport { getAndSetTeachers } from '../../actions/teachers';\nimport getAndSetCourses from '../../actions/courses';\nimport { getUsernameFromCookie } from '../../helperFunction/getCookie';\nimport StudentComponent from './StudentComponent';\n\nimport setInputState from '../../genericFunctions/setInputState';\nimport clearMessage from '../../genericFunctions/clearMessage';\n\n// import './_attendancePage.scss';\n\n\n/**\n * NOTE :- \n *  FOR THIS PAGE WE CANT USE ANY GENERIC FUNCTION \n *  BCOZ HANDLING OF FILES IS DIFFERENT THAT SIMPLE DATA\n *  AND THEREFORE NEED DIFFERENT handleSubmit and makeReqeust\n */\n\nclass AttendancePage extends Component{\n    constructor(props){\n        super(props);        \n        this.state = {\n            isFetching: false,\n            FetchingTime : 100 ,\n            data: {\n                image: undefined,\n                courseData: {}\n            },\n            errorsExists: false,\n            errors:{\n                fileError: \"\",\n                otherError: \"\"\n            },\n            messages: \"\"\n        }\n    }\n\n    //////////////////////////////////// INPUT HANDLERS ///////////////////////////////////////\n    \n    onFileInputChange = (e) => {\n        const value = e.target.files[0];\n        setInputState.call(this,\"data\",\"image\",value)\n    }\n\n    getAndSetTeacherRelatedCourses = ()=>{\n        const courseFilters ={\n            teacherAssigned : this.props.teachers[0]['name']\n        }\n        const courseProjection = {}\n        return this.props.setCourses(courseFilters, courseProjection);\n    }\n    \n    onInputChange = (e)=>{\n        const value = e.target.value;\n\n        /* AT THIS POINT IT IS POSSIBLE COURSES IN THE STATE\n        * IS JUST ONE COURSES WHICH WAS SELECTED WHILE MAKING ATTENDANCE\n        * BCOZ WHEN WE MAKE ATTENDANCE WE JUST GET ATTENDANCE INFO OF A\n        * SINGLE COURSE SO NOW WE ONLY HAVE DATA OF ONE COURSE IN STORE \n        * \n        * AND\n        * \n        * => ON SWITCHING TO DIFFERENT COURSE \n        * WE FIRST NEED TO GET ALL THE COURSE AGAIN \n        */\n       \n        this.getAndSetTeacherRelatedCourses()\n        .then(()=>{\n            const currentSelectedCourse = this.props.courses.filter(course => course.name === value)[0]\n            const { department } = this.props.teachers[0];\n            const { name, semester } = currentSelectedCourse;\n    \n            setInputState.call(this,\"data\",\"courseData\",{\n                name,department,semester\n            })\n            .then(this.setTodaysAttendance)/* GET ATTENDANCE OF COURSE SELECTED IN DROP DOWN */\n        })\n        // console.log(\"run\")\n    }\n\n    //////////////////////////////////// INPUT HANDLERS ENDS///////////////////////////////////////\n\n\n    //////////////////////////////////// ERROR HANDLERS ///////////////////////////////////////\n\n\n    setErrors = (toUpdate)=>{\n        this.setState((prevState) =>{\n            return {\n                errors:{\n                    ...prevState.errors,\n                    ...toUpdate\n                }\n            }\n        })\n        this.setState({errorsExists: true});\n    }\n    \n    clearAllErrors = ()=>{\n        this.setErrors({\n            fileError: \"\",\n            otherError: \"\"\n        })\n        this.setState({errorsExists: false});\n    }\n\n    \n    applyAuthentication(){\n        const { image } = this.state.data;\n\n        return new Promise((resovle,reject)=>{\n            if(image === undefined){\n                this.setErrors({fileError: \"Upload a File\"})\n            }\n\n            resovle();\n        })\n\n    }\n\n\n    //////////////////////////////////// ERROR HANDLERS ENDS///////////////////////////////////////\n\n\n    //////////////////////////////////// REQUEST RELATED FUNCTIONS ///////////////////////////////////////\n\n\n    setTodaysAttendance = () => {\n        const currentCourseName = this.state.data.courseData.name;\n        /**\n         *  We already have fetched the all related courses for the teacher\n         * but still are making the request again because in the initial request\n         * we dont get the attendance of course(bcoz it would have wasted the band-width)\n         * now we only are fetch attendance of this course(which is selected) not for all of them\n         */\n        this.props.setCourses({\n            \"name\": currentCourseName\n        })\n\n        .then(()=>{\n            const AttendanceArray = this.props.courses[0]['attendance']\n            \n            // GET TODAYS DATE\n            var today = new Date();\n            var dd = String(today.getDate()).padStart(2, '0');\n            var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n            var yyyy = today.getFullYear();\n    \n            today = yyyy + '-' + mm + '-' + dd;\n            let todaysAttendance;\n    \n            /// fall to catch if attendance not done yet\n            try{\n                todaysAttendance = AttendanceArray.filter(attendance => attendance.date === today )[0]['attendance_on_date']\n            }catch{\n                todaysAttendance = false;\n            }\n            this.setState({todaysAttendance})\n        })\n\n    }\n\n    handleResponse = (response)=>{\n        const { message , status } = response.result;\n        if(response.status === 200){\n            switch(status){\n                case 201:\n                    console.log(message)\n                    this.setState(prevState => ({\n                        messages: message\n                    }),clearMessage.bind(this,3000))\n\n                    // DISPLAY ATTENDANCE AFTER IT IS DONE\n                    this.setTodaysAttendance()\n                    break;\n                case 400:\n                    console.log(message)\n                    this.setState(prevState => ({\n                        messages: message\n                    }))\n                    break\n                case 401:\n                    console.log(message)\n                    this.setState(prevState => {\n                        return {\n                            ...prevState,\n                            errors : {\n                                ...prevState.errors,\n                                otherError: message\n                            }\n                        }\n                    })\n                    break\n                    default:\n                        break\n                    }\n        }\n    }\n\n\n    makeRequest = (requestUrl) =>{\n        let formData = new FormData();\n        const { image, courseData }  = this.state.data;\n\n        formData.append('file', image)\n        formData.append(\"courseData\",JSON.stringify(courseData));\n\n        const options = {\n            method: 'POST',\n            body: formData\n        }\n\n        if(!this.state.errorsExists){\n            fetch(requestUrl,options)\n            .then(response => response.json())\n            .then(response => this.handleResponse(response))\n        }\n    }\n    \n    \n    \n    onSubmit = (e)=>{\n        e.preventDefault();\n\n        /**\n         * FIRST CLEAR ALL ERROR \n         * AND\n         * APPLY AUTHENTICATION TO CHECK FOR ERRORS\n        */\n        this.clearAllErrors();\n        this.applyAuthentication()\n        .then(()=>{\n            setTimeout(()=>{\n                this.clearAllErrors();\n            },3000)\n        })\n        /**\n         * IF THERE IS NO ERRORS ONLY THEN \n         * MAKE THE REQUEST OTHERWISE DO NOTHING\n         * \n         * AND \n         * \n         * THERE WILL BE SHOWING ERROR ON THE FORM IF ANY EXIST\n        */\n        .then(()=>{\n            const url = \"http://localhost:5000/initiate_attendence\";\n            this.makeRequest(url) \n        })\n    }\n\n\n    //////////////////////////////////// REQUEST RELATED FUNCTIONS ENDS///////////////////////////////////////\n\n\n\n    componentDidMount = ()=>{\n        // CREATE TEACHER FILTERS & PEOJECTION FOR BACKEND USE\n        const teacherFilters = {\n            \"username\": getUsernameFromCookie()\n        }\n        const teacherProjection = {\n            \"name\": true,\n            \"department\": true\n        }\n        \n        // Request will be made to backend with filters & projection \n        //to get current Teacher\n        this.props.setTeachers(teacherFilters,teacherProjection) //WILL RETURN A PROMISE\n        .then(() =>{\n            const { name, department } = this.props.teachers[0]\n\n        // CREATE COURSE FILTERS & PEOJECTION FOR BACKEND USE\n\n            const courseFilters = {\n                \"teacherAssigned\": name,\n                \"department\": department\n            }\n            const courseProjection = {}\n            \n            // Request will be made to backend with filter & projection \n            //to get course assigned to current Teacher\n            this.props.setCourses(courseFilters,courseProjection) //WILL RETURN A PROMISE\n            .then(()=>{\n                // GET ALL TEACHER RELATED COURSES\n                const relatedCourses = this.props.courses;\n                if(relatedCourses){\n                    this.setState(prevState =>{\n                        return {\n                            isFetching: true,\n                            relatedCourses,\n                            data: {\n                                ...prevState.data,\n                                courseData : {\n                                    \"name\" : relatedCourses[0]['name'],\n                                    \"department\" : relatedCourses[0]['department'],\n                                    \"semester\" : relatedCourses[0]['semester']\n                                }\n                            }\n                        }\n                    })\n\n                    // Show the attendance if already done\n                    this.setTodaysAttendance();\n                }\n            })\n        })\n    }\n    \n\n    /////////////////////////////   RENDER FUNCTIONS ///////////////////////////////////////////\n\n    render() {\n    if(!this.state.isFetching){\n        return (\n            <div className=\"MainBody sidePage\">\n                <div className=\"Container\">\n                    <div className=\"FormContainer\">\n                        <header>\n                            <h1>Attendance</h1>\n                        </header>\n                        <form>\n                            <div>\n                                <p>Fetching ....</p>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        )\n    }else{\n        return (\n            <div className=\"MainBody sidePage\">\n                <div className=\"Container\">\n                    <div className=\"FormContainer\">\n                        <header>\n                            <h1>\n                                Attendance\n                            </h1>\n                        </header>\n                        {this.state.messages && <span className=\"confirmationMessage\">{this.state.messages}</span>}\n                        {this.state.errors.otherError && <span className=\"errorMessage\">{this.state.errors.otherError}</span>}\n                        {this.state.errors.courseExist && <span className=\"errorMessage\">{this.state.errors.courseExist}</span>}\n                        <form onSubmit={this.onSubmit} encType=\"multipart/form-data\">\n                            <div>\n                                <label className=\"Label\" htmlFor=\"course\">Course</label>\n                                <div className=\"selectDiv\">\n                                    <select \n                                        id=\"course\"\n                                        name=\"course\"\n                                        onChange={this.onInputChange}\n                                    >\n                                        {\n                                            this.state.relatedCourses.map( course =>{\n                                                const { name } = course\n                                                return <option key={name} value={name}>{name}</option>\n                                            })\n                                        }\n                                    </select>\n                                </div>\n                            </div>\n                            <div>\n                                <label \n                                    className=\"Label\"\n                                    htmlFor=\"name\"\n                                >\n                                    Upload Image\n                                </label>\n                                <div className=\"inputErrorDiv\">\n                                    <div className=\"inputDiv\">\n                                        <input\n                                            type=\"file\"\n                                            id=\"image\"\n                                            placeholder=\"\"\n                                            onChange={this.onFileInputChange}\n                                        />\n                                    </div>\n                                    {this.state.errors.fileError && <span className=\"errorMessage\">{this.state.errors.fileError}</span>}\n                                </div>\n                            </div>\n                            <button className=\"Button\">\n                                make Attendance\n                            </button>\n                        </form>\n                    </div>\n                </div>\n                <div className=\"ListBlock\">\n                <header>\n                    <h2> All Students </h2>\n                </header>\n                {this.state.todaysAttendance && \n                    <div className=\"student_MainContainer\">\n                        <ol>\n                            {\n                                this.state.todaysAttendance.map(attendance =>{\n                                    const {roll_no, status} = attendance\n                                    return <li \n                                            key={roll_no}>\n                                                <StudentComponent \n                                                    roll_no={roll_no}\n                                                        status={status}\n                                                    />\n                                            </li>\n                                })\n                            }\n                        </ol>\n                    </div>\n                }\n            </div>\n            </div>\n        )\n    }\n    }\n}\n\nconst mapStateToProps = (state)=>{\n    return {\n        teachers: state.teachers,\n        courses: state.courses\n    }\n}\n\nconst mapDispatchToProps = (dispatch)=>{\n    return{\n        setTeachers : (filters,projection) => dispatch(getAndSetTeachers(filters,projection)),\n        setCourses : (filters,projection) => dispatch(getAndSetCourses(filters,projection))\n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(AttendancePage);"]},"metadata":{},"sourceType":"module"}