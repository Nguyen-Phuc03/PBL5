{"ast":null,"code":"import makeRequest from './makeRequest';\nexport default function (requestUrl) {\n  /**\n   * FIRST CLEAR ALL ERROR \n   * AND\n   * APPLY AUTHENTICATION TO CHECK FOR ERRORS\n   */\n  this.clearAllErrors();\n  this.applyAuthentication()\n  /**\n   * IF THERE IS NO ERRORS ONLY THEN \n   * MAKE THE REQUEST OTHERWISE DO NOTHING\n   * \n   * AND \n   * \n   * THERE WILL BE SHOWING ERROR ON THE FORM IF ANY EXIST\n   */\n  .then(() => {\n    if (!this.state.errorsExists) {\n      /**\n       * IF there setTimeOut is set we need to clear it\n       * OTHERWISE \n       * There will be a Memory Leak\n       */\n      clearTimeout(this.errorTimeOut);\n      const data = this.state.data;\n      /**\n       * TRY DELETING ANY THING THAT CAN COME IN DATA\n       * BUT SHOULD NOT BE SEND TO SERVER LIKE:- CONFIRM PASSWORD\n       */\n\n      const notAllowed = ['confirmPassword'];\n      /**\n       * ONLY ALLOW THE DATA WHICH IS NOT IN \n       * NOT ALLOWED ARRAY\n       */\n\n      const filterData = Object.keys(data).filter(key => notAllowed.includes(key) ? false : true).reduce((obj, key) => {\n        obj[key] = data[key];\n        return obj;\n      }, {});\n      makeRequest(requestUrl, filterData).then(response => response.json()).then(response => this.handleResponse(response));\n    } else {\n      /**\n       * Errors should not stay on page forever,\n       * So after 3sec of errors are showen on The Page,\n       * I should call clearAllErrors() to clear them \n       */\n      this.errorTimeOut = setTimeout(() => {\n        this.clearAllErrors();\n      }, 3000);\n    }\n  });\n}","map":{"version":3,"sources":["E:/Documents/Reactjs/PBL5_Demo/Frontend/src/genericFunctions/handleSubmit.js"],"names":["makeRequest","requestUrl","clearAllErrors","applyAuthentication","then","state","errorsExists","clearTimeout","errorTimeOut","data","notAllowed","filterData","Object","keys","filter","key","includes","reduce","obj","response","json","handleResponse","setTimeout"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,eAAxB;AAGA,eAAe,UAASC,UAAT,EAAoB;AAC/B;AACJ;AACA;AACA;AACA;AACI,OAAKC,cAAL;AACA,OAAKC,mBAAL;AAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AAVI,GAWCC,IAXD,CAWM,MAAI;AACN,QAAG,CAAC,KAAKC,KAAL,CAAWC,YAAf,EAA4B;AACxB;AACZ;AACA;AACA;AACA;AACYC,MAAAA,YAAY,CAAC,KAAKC,YAAN,CAAZ;AAEA,YAAMC,IAAI,GAAG,KAAKJ,KAAL,CAAWI,IAAxB;AAEA;AACZ;AACA;AACA;;AAEY,YAAMC,UAAU,GAAG,CAAC,iBAAD,CAAnB;AAEA;AACZ;AACA;AACA;;AACY,YAAMC,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYJ,IAAZ,EACCK,MADD,CACQC,GAAG,IAAIL,UAAU,CAACM,QAAX,CAAoBD,GAApB,IAA2B,KAA3B,GAAmC,IADlD,EAECE,MAFD,CAEQ,CAACC,GAAD,EAAMH,GAAN,KAAY;AACfG,QAAAA,GAAG,CAACH,GAAD,CAAH,GAAWN,IAAI,CAACM,GAAD,CAAf;AACA,eAAOG,GAAP;AACJ,OALD,EAKE,EALF,CAAnB;AAOAlB,MAAAA,WAAW,CAACC,UAAD,EAAYU,UAAZ,CAAX,CACCP,IADD,CACMe,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAEChB,IAFD,CAEMe,QAAQ,IAAI,KAAKE,cAAL,CAAoBF,QAApB,CAFlB;AAGH,KA/BD,MA+BK;AACD;AACZ;AACA;AACA;AACA;AACY,WAAKX,YAAL,GAAoBc,UAAU,CAAC,MAAI;AAC/B,aAAKpB,cAAL;AACH,OAF6B,EAE5B,IAF4B,CAA9B;AAGH;AACJ,GArDD;AAuDH","sourcesContent":["import makeRequest from './makeRequest';\n\n\nexport default function(requestUrl){\n    /**\n     * FIRST CLEAR ALL ERROR \n     * AND\n     * APPLY AUTHENTICATION TO CHECK FOR ERRORS\n     */\n    this.clearAllErrors();\n    this.applyAuthentication()\n    \n\n    /**\n     * IF THERE IS NO ERRORS ONLY THEN \n     * MAKE THE REQUEST OTHERWISE DO NOTHING\n     * \n     * AND \n     * \n     * THERE WILL BE SHOWING ERROR ON THE FORM IF ANY EXIST\n     */\n    .then(()=>{\n        if(!this.state.errorsExists){\n            /**\n             * IF there setTimeOut is set we need to clear it\n             * OTHERWISE \n             * There will be a Memory Leak\n             */\n            clearTimeout(this.errorTimeOut);\n\n            const data = this.state.data;\n\n            /**\n             * TRY DELETING ANY THING THAT CAN COME IN DATA\n             * BUT SHOULD NOT BE SEND TO SERVER LIKE:- CONFIRM PASSWORD\n             */\n\n            const notAllowed = ['confirmPassword']\n\n            /**\n             * ONLY ALLOW THE DATA WHICH IS NOT IN \n             * NOT ALLOWED ARRAY\n             */\n            const filterData = Object.keys(data)\n                               .filter(key => notAllowed.includes(key) ? false : true)\n                               .reduce((obj, key)=>{\n                                    obj[key] = data[key]\n                                    return obj;\n                               },{});\n\n            makeRequest(requestUrl,filterData)\n            .then(response => response.json())\n            .then(response => this.handleResponse(response))\n        }else{\n            /**\n             * Errors should not stay on page forever,\n             * So after 3sec of errors are showen on The Page,\n             * I should call clearAllErrors() to clear them \n             */\n            this.errorTimeOut = setTimeout(()=>{\n                this.clearAllErrors();\n            },3000)\n        }\n    })\n\n}"]},"metadata":{},"sourceType":"module"}